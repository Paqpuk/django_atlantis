from django_tables2.tables import Table
from ..themes import themes


def get_model_fields(model):
    return [field.name for field in model._meta.fields if field.auto_created is False]


def table_factory(model, table=Table, fields=None, exclude=None,
                  localize=None, theme: type = themes.Atlantis,
                  extra_columns: list = None):
    """
    Return Table class for given `model`, equivalent to defining a custom table class::

        class MyTable(tables.Table):
            class Meta:
                model = model

    Arguments:
        :param model: (`~django.db.models.Model`): Model associated with the new table
        :param table: (`.Table`): Base Table class used to create the new one
        :param fields: (list of str): Fields displayed in tables
        :param exclude: (list of str): Fields exclude in tables
        :param localize: (list of str): Fields to localize
        :param theme: ('scripts.themes.AbstractTheme'): class with Meta attrs
        :param extra_columns: (list of AbstractExtraColumn) extra column classes from extra_column.py
    """
    attrs = {"model": model}
    if fields is not None:
        attrs["fields"] = fields
    else:
        default_fields = get_model_fields(model)
        default_fields.extend([str(cls()).capitalize() for cls in extra_columns])
        attrs["fields"] = default_fields
    if exclude is not None:
        attrs["exclude"] = exclude
    if localize is not None:
        attrs["localize"] = localize
    # Check if user implemented abstracted properties
    _ = theme()  # will raise TypeError if 'table_meta_attrs' is missing
    attrs.update(theme.table_meta_attrs)
    # Create 'Meta'
    meta = type("Meta", (object,), attrs)

    # define extra columns class which
    if extra_columns:
        extra_col_class = type('buttons', (Table, ), {str(cls()): cls.accessor for cls in extra_columns})
        for cls in extra_columns:
            setattr(extra_col_class, f'render_{str(cls())}', staticmethod(cls.render_accessor))
        bases = (extra_col_class, table)
    else:
        bases = (table, )

    # Give this new table class a reasonable name.
    class_name = model.__name__ + "AutogeneratedTable"
    # Class attributes for the new table class.
    table_class_attrs = {"Meta": meta}
    return type(table)(class_name, bases, table_class_attrs)
